<?xml version="1.0" encoding="UTF-8"?>
<ActiveReportsLayout Version="3.1" PrintWidth="18420" DocumentName="ARNet Document" ScriptLang="C#" UserData="AAEAAAD/////AQAAAAAAAAAEAQAAABxTeXN0ZW0uQ29sbGVjdGlvbnMuSGFzaHRhYmxlBwAAAApMb2FkRmFjdG9yB1ZlcnNpb24IQ29tcGFyZXIQSGFzaENvZGVQcm92aWRlcghIYXNoU2l6ZQRLZXlzBlZhbHVlcwAAAwMABQULCBxTeXN0ZW0uQ29sbGVjdGlvbnMuSUNvbXBhcmVyJFN5c3RlbS5Db2xsZWN0aW9ucy5JSGFzaENvZGVQcm92aWRlcgjsUTg/AAAAAAoKCwAAAAkCAAAACQMAAAAQAgAAAAAAAAAQAwAAAAAAAAALAAAAAAAAAAAAAAAAAAAAAA==" MasterReport="0">
  <StyleSheet>
    <Style Name="Normal" Value="font-family: Arial; font-style: normal; text-decoration: none; font-weight: normal; font-size: 10pt; color: Black" />
    <Style Name="Heading1" Value="font-size: 16pt; font-weight: bold" />
    <Style Name="Heading2" Value="font-family: Times New Roman; font-size: 14pt; font-weight: bold; font-style: italic" />
    <Style Name="Heading3" Value="font-size: 13pt; font-weight: bold" />
  </StyleSheet>
  <Sections>
    <Section Type="ReportHeader" Name="ReportHeader1" Height="63200" BackColor="16777215">
      <Control Type="AR.Field" Name="TextBox9" Tag="&lt;FieldConfigurationDS xmlns=&quot;http://tempuri.org/ChartConfiguration.xsd&quot;&gt;&#xD;&#xA;  &lt;FieldConfiguration FieldConfiguration_Id=&quot;0&quot;&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;DataBinding&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;      &lt;Property&gt;&#xD;&#xA;        &lt;Name&gt;DataField&lt;/Name&gt;&#xD;&#xA;        &lt;Value&gt;22811&lt;/Value&gt;&#xD;&#xA;        &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;        &lt;CustomData /&gt;&#xD;&#xA;        &lt;Description /&gt;&#xD;&#xA;      &lt;/Property&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;FormatProperties&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;1&lt;/PropertyGroup_Id&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;  &lt;/FieldConfiguration&gt;&#xD;&#xA;&lt;/FieldConfigurationDS&gt;" Left="17375.04" Top="1166.401" Width="630" Height="288" Text="PrintTime" OutputFormat="HH:mm" Style="text-align: right; white-space: inherit" />
      <Control Type="AR.Field" Name="TextBox17" Tag="" Left="15035.04" Top="1166.401" Width="1260" Height="288" Text="Tulostusaika:" OutputFormat="dd.MM.yyyy" Style="white-space: inherit" />
      <Control Type="AR.Image" Name="Picture1" Left="15664.32" Top="0.0006866455" Width="2340.72" Height="879.84" LineColor="16777215" LineWeight="0" SizeModeontrol>
      <Control Type="AR.Field" Name="TextBox14" Tag="&lt;FieldConfigurationDS xmlns=&quot;http://tempuri.org/ChartConfiguration.xsd&quot;&gt;&#xD;&#xA;  &lt;FieldConfiguration FieldConfiguration_Id=&quot;0&quot;&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;DataBinding&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;      &lt;Property&gt;&#xD;&#xA;        &lt;Name&gt;DataField&lt;/Name&gt;&#xD;&#xA;        &lt;Value&gt;22810&lt;/Value&gt;&#xD;&#xA;        &lt;PropertyGroup_Id&gt;0&lt;/PropertyGroup_Id&gt;&#xD;&#xA;        &lt;CustomData /&gt;&#xD;&#xA;        &lt;Description /&gt;&#xD;&#xA;      &lt;/Property&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;    &lt;PropertyGroup&gt;&#xD;&#xA;      &lt;FieldConfiguration_Id&gt;0&lt;/FieldConfiguration_Id&gt;&#xD;&#xA;      &lt;Name&gt;FormatProperties&lt;/Name&gt;&#xD;&#xA;      &lt;PropertyGroup_Id&gt;1&lt;/PropertyGroup_Id&gt;&#xD;&#xA;    &lt;/PropertyGroup&gt;&#xD;&#xA;  &lt;/FieldConfiguration&gt;&#xD;&#xA;&lt;/FieldConfigurationDS&gt;" Left="16205.04" Top="1166.401" Width="1170" Height="288" Text="PrintDate" OutputFormat="dd.MM.yyyy" Style="text-align: right; white-space: nowrap" />
    </Section>
    <Section Type="PageHeader" Name="PageHeader1" Height="360" BackColor="16777215" />
    <Section Type="Detail" Name="Detail1" Height="360" BackColor="16777215" />
    <Section Type="PageFooter" Name="PageFooter1" Height="360" BackColor="16777215" />
    <Section Type="ReportFooter" Name="ReportFooter1" Height="360" BackColor="16777215" />
  </Sections>
  <ReportComponentTray />
  <Script><![CDATA[static int lineWidth = 2;

  
static System.Drawing.Color[] serieColors = new System.Drawing.Color[6]{
	System.Drawing.Color.Red,
	System.Drawing.Color.Blue,
	System.Drawing.Color.Black,
	System.Drawing.Color.Green,
	System.Drawing.Color.Indigo,
	System.Drawing.Color.Brown
	};


static System.Drawing.Color backColor = System.Drawing.Color.White; // Background color for the trends

static int labelFontSize = 12; // AXIS LABEL SIZE
static int titleFontSize = 11; 
static string defaultPeriod = "01:00:00"; // default data query time period as "hh:mm:ss"

const int graphCount = 2; // IMPORTANT, HOW MANY TREND PICTURES ARE GENERATED
static string[] graphTitles = new string[graphCount]{"Kuvaaja1","Kuvaaja2"}; // What are the titles of the generated trends

// 1. Title 2. Time step suffix
static string[][] timeSteps = new string[][]{new string[]{"Perustaso", ""},new string[]{"Tuntitaso", "-1H"}, new string[]{"Päivätaso", "-1D"}};


static string header = "PÄÄOTSIKKO";
static string header2 = "ALAOTSIKKO";



static float spacer = 1.5f;
static float yStart = 1.8f;
static float graphHeight = 8.0f;
static float xStart = 0.45f;
static float graphWidth = 12.0f;
static float reportWidth = 14.0f;

public void ActiveReport_ReportStart()
{
	string startTime = g_Parameters["startTime"];
	string endTime = g_Parameters["endTime"];
	string scaleMode = g_Parameters["Skaalaus"];
	var culture = System.Globalization.CultureInfo.CurrentCulture.ToString();
	startTime = DateTime.Parse(startTime, new System.Globalization.CultureInfo(culture, false)).ToString();
	endTime = DateTime.Parse(endTime, new System.Globalization.CultureInfo(culture, false)).ToString();
	
	string supportFileName = "Briketointi_demo.mrx"; // IMPORTANT, WHAT IS THE NAME OF THE .mrx FILE
	string reportDnaPath = "/PROJECT/jannen_ominaisuudet/"; // IMPORTANT, WHERE IS THE REPORT-FILE LOCATED IN DNAreport FOLDER
	string reportPathTemplate = "/DNA/DNAReport/Viewer.aspx?Report="+reportDnaPath+supportFileName+"&startTime=[STARTTIME]&endTime=[ENDTIME]&Jakso=[SPANMODE]&Skaalaus=[SCALEMODE]&Aikataso=";
	string tracerImageLink = @"D:/DNA/Data/IA/DNAreport" + reportDnaPath + "tracerpicture.png";
	string tracerPathTemplate = "/DNA/DNATracer?report=_dnause/Trend&tags=";
	
	string[] titles1 = new string[] {"","Mittaus1","Mittaus2"}; // Axis-titles of the first generated trend file. First is title of the time-axis and the rest are for vertical axes.
	string[] titles2 = new string[] {"","Mittaus1","Mittaus2"};
	//string[] titles3 = new string[] {"","Mittaus1","Mittaus2","Mittaus3"}; // IMPORTANT, COMMENT OUT THOSE ARRAYS THAT ARE NOT NEEDED
	//string[] titles4 = new string[] {"","Mittaus1","Mittaus2","Mittaus3","Mittaus4", "Mittaus5", "Mittaus6"};

	string[][] titlesList = new string[][]{titles1,titles2}; //  IMPORTANT, ADD HERE THE TITLE-ARRAYS THAT ARE GOING TO BE USED. ONE ARRAY FOR EACH TREND.




	string[] formats1 = new string[] {"line","bar"}; //  IMPORTANT, TYPE "line" IF YOU WANT TO GENERATE LINE-TREND. TYPE "points" IF YOU WANT TO GENERATE POINT-TREND (Test-version).
	string[] formats2 = new string[] {"points","line"};
	//string[] formats3 = new string[] {"line","line","line"}; // IMPORTANT, COMMENT OUT THOSE ARRAYS THAT ARE NOT NEEDED
	//string[] formats4 = new string[] {"line","line","line","line", "line", "line"};
	
	string[][] formatList = new string[][]{formats1,formats2};//  IMPORTANT, ADD HERE THE FORMAT-ARRAYS THAT ARE GOING TO BE USED. ONE ARRAY FOR EACH TREND.
	
	


	//  IMPORTANT, ADD ONE    " new int[]{*high limit*, *low limit*, *increment*} "     FOR EACH OF THE GRAPHS IN ONE TREND. 
	int[][] limitsAndIncrement1 = new int[][]{new int[]{110, 0, 20},new int[]{100, 0, 20},new int[]{200, 20, 20},new int[]{500, 0, 25},new int[]{500, 0, 25},new int[]{500, 0, 25}};
	int[][] limitsAndIncrement2 = new int[][]{new int[]{110, 0, 10},new int[]{100, 0, 20},new int[]{500, 0, 25},new int[]{500, 0, 25},new int[]{500, 0, 25},new int[]{500, 0, 25}};
	//int[][] limitsAndIncrement3 = new int[][]{new int[]{2000, 0, 400},new int[]{500, 0, 25},new int[]{500, 0, 25},new int[]{500, 0, 25},new int[]{500, 0, 25},new int[]{500, 0, 25}}; // IMPORTANT, COMMENT OUT THOSE ARRAYS THAT ARE NOT NEEDED
	//int[][] limitsAndIncrement4 = new int[][]{new int[]{1500, 0, 50},new int[]{500, 0, 25},new int[]{500, 0, 25},new int[]{500, -500, 25},new int[]{500, 0, 25},new int[]{500, 0, 25}};
	
	int[][][] limitsAndIncrementsList = new int[][][]{limitsAndIncrement1,limitsAndIncrement2}; //  IMPORTANT, ADD HERE THE LIMIT-ARRAYS THAT ARE GOING TO BE USED. ONE ARRAY FOR EACH TREND.





	string[] tagList1 = new string[]{"sim1m_1;avg","sim1m_2;avg"}; //  IMPORTANT, ADD THE POSITIONS THAT YOU WANT TO ADD TO THE TREND. ";" SEPARATES THE POSITION AND THE QUERY OPERATION.
	string[] tagList2 = new string[]{"25FC-100:me;actual","25FC-101:me;avg"};
	//string[] tagList3 = new string[]{"MA111FIC105:me;avg","MA111FIC115:me;avg","MA421FV819a17:av;avg"}; // IMPORTANT, COMMENT OUT THOSE ARRAYS THAT ARE NOT NEEDED
	//string[] tagList4 = new string[]{"MA111FIC105:me;avg","MA111FIC115:me;avg","MA111FIC125:me;avg","MA111FIC135:me;avg","MA241FIC104:me;avg","MA243FIC578:me;avg"};

	string[][] tagLists=new string[][]{tagList1,tagList2}; //  IMPORTANT, ADD HERE THE LIMIT-ARRAYS THAT ARE GOING TO BE USED. ONE ARRAY FOR EACH TREND.
	
	
	
	double differenceInHours = DateTime.Now.Subtract(DateTime.Parse(endTime)).TotalHours;
	string currentTS = g_Parameters["Aikataso"];
	string timeSpanMode = g_Parameters["Jakso"];
	
	if(currentTS != ""){
		for (int i = 0; i < tagLists.Length; i++ )
		{
			for (int j = 0; j < tagLists[i].Length; j++)
			{
				//if(tagLists[i][j].Contains("-")) throw new Exception("");
				tagLists[i][j] = tagLists[i][j].Split(';')[0] + currentTS + ';' + tagLists[i][j].Split(';')[1];
			}
		}
	
	}

	string[] distinctTagList =  mergeDistictArrays(tagLists);
	DataSet dsTagData = getDataSets(distinctTagList,currentTS, tagLists, startTime, endTime, defaultPeriod, timeSteps);   

	SetHeaders();
	if(differenceInHours > 1){
		setHistoryIndication();
		g_Parameters["autoUpdateInterval"] = null;
	};
	
	string currentPath = reportPathTemplate.Replace(  "[STARTTIME]", startTime  );
	currentPath = currentPath.Replace("[ENDTIME]",endTime);
	SetTimeStepMenu(timeSteps, currentPath, currentTS, reportPathTemplate, timeSpanMode, scaleMode);


	for (int i = 0; i < graphCount; i++){
		
	
		try{

			string[] titles_i = titlesList[i];
			for(int titleNo = 1; titleNo < titles_i.Length; titleNo++){
				
				string axisTitle = titles_i[titleNo];

				string unit = dsTagData.Tables["info"+i.ToString()].Rows[titleNo - 1]["Unit"].ToString();

				if(unit == "") unit = "kg / nm3";
				if(axisTitle.Substring(axisTitle.Length - 1) ==")"){}else{
					string newTitle = axisTitle + "    (" + unit + ")";
					titles_i[titleNo] = newTitle;
				}
				

			}
		}catch(Exception e){
			
			throw new Exception(dsTagData.Tables.Count.ToString()+" taulua; "+dsTagData.Tables["info0"].Rows.Count.ToString()+" riviä infossa; "+currentTS+" taso  "+ e.ToString());
		}
		int seriesCount = tagLists[i].Length;

		setReportConfigs(dsTagData);


		CustomControl currControl = new  CustomControl(new Steema.TeeChart.TChart().GetType());
		Steema.TeeChart.TChart currChart = (Steema.TeeChart.TChart) currControl.Control;
		
		currControl.Height = graphHeight;
		currControl.Width = graphWidth + 1.0f;
		if(formatList[i].Length > 4){
			currControl.Width = graphWidth + 0.5f;
			currControl.Left = xStart + 0.2f;
		} 
		else{
			currControl.Width = graphWidth + 1.0f;
			currControl.Left = xStart;
		}


		currControl.Top = yStart + i * (graphHeight + spacer);
		
		
		
		Picture tracerLink = new Picture();
		System.Drawing.Image img = System.Drawing.Image.FromFile(tracerImageLink);
		tracerLink.Image = img;
		tracerLink.Name = "Pic" + (i + 1).ToString();
		tracerLink.Top = yStart + (i + 1) * (spacer + graphHeight) - 2.0f;
		tracerLink.Left = xStart + graphWidth - 0.6f;
		tracerLink.Width = 0.3f;
		tracerLink.Height = 0.3f;
		
		
		
		string lineSpacer = "%0d%0a";
		string tracerHyperLink = tracerPathTemplate;
		
		for(int serieNr = 0; serieNr < seriesCount; serieNr++){
			tracerHyperLink = tracerHyperLink + tagLists[i][serieNr].Split(';')[0];
			if(serieNr != seriesCount - 1){
				tracerHyperLink = tracerHyperLink + lineSpacer;
			}
		}
		tracerHyperLink = tracerHyperLink + "&operationList=";
		for(int serieNr = 0; serieNr < seriesCount; serieNr++){
			tracerHyperLink = tracerHyperLink + "Actual";
			if(serieNr != seriesCount - 1){
				tracerHyperLink = tracerHyperLink + lineSpacer;
			}
		}
		tracerHyperLink = tracerHyperLink + "&periodList=";
		for(int serieNr = 0; serieNr < seriesCount; serieNr++){
			tracerHyperLink = tracerHyperLink + "01:00:00";
			if(serieNr != seriesCount - 1){
				tracerHyperLink = tracerHyperLink + lineSpacer;
			}
		}
		//string startTime = System.DateTime.Parse(startTime).ToString("s"); // tarviiko "s"
		//string endTime = System.DateTime.Parse(endTime).ToString("s");
		tracerHyperLink = tracerHyperLink + "&startTime=" + startTime + "&endTime=" + endTime + "&Period=00:01:00";
		tracerLink.HyperLink = tracerHyperLink;
		
		currChart.Panel.MarginBottom = 5;
		currChart.Panel.MarginLeft = 12;
		currChart.Panel.MarginRight = 12;
		currChart.Panel.MarginTop = 5;
	
		currChart.Header.Visible = true;
		currChart.Header.Text = graphTitles[i];
		currChart.Header.Font.Size = 15;
		currChart.Header.Font.Color = System.Drawing.Color.Black;
		currChart.BackColor = backColor;
		
		currChart.Legend.Visible = false;
		currChart.Aspect.View3D = false;	
		currChart.Legend.Visible = false;
		currChart.Legend.Alignment = Steema.TeeChart.LegendAlignments.Bottom;
		currChart.Legend.Shadow.Visible = false;
		currChart.Panel.Brush.Visible = true;
		currChart.Panel.Bevel.Inner = Steema.TeeChart.Drawing.BevelStyles.None;
		currChart.Panel.Bevel.Outer = Steema.TeeChart.Drawing.BevelStyles.None;
		
		List<Steema.TeeChart.Axis> axes = createCustomAxes(currChart, formatList[i].Length);

		formatSeries(currChart, dsTagData, formatList[i], axes, i);
		formatAxes(currChart, titlesList[i], formatList[i], limitsAndIncrementsList[i], axes, startTime, endTime, scaleMode);
		
		buildLegend(dsTagData, i);

		rpt.Sections["ReportHeader1"].Controls.Add(currControl);
		rpt.Sections["ReportHeader1"].Controls.Add(tracerLink);
		dsTagData.Dispose();
		

	}

	
	

	
}

public void formatAxes(Steema.TeeChart.TChart chart, string[] titleList, string[] formatList, int[][] limits, List<Steema.TeeChart.Axis> axisList, string startTime, string endTime, string scaleMode){

	
	
	int length = axisList.Count;
	int titleListLength = titleList.Length;
	int[] angleList = new int[6]{90,270,90,270,90,270};
	bool axisBuffer = false;
	bool axisBufferOtherSide = false;
	int relativePositionAxes3 = -9;
	int relativePositionAxes4 = -9;
	int relativePositionAxes5 = -18;
	int relativePositionAxes6 = -18;
	


	
	for (int i = 0; i < length; i++){

		if(i == 0){
			axisList[0].Title.Font.Size = titleFontSize;
			axisList[0].Labels.Font.Size = labelFontSize - 2;
			axisList[0].Labels.Angle = 25;
			
		}
		
		if(i < titleListLength){
			axisList[i].Title.Text = titleList[i]; // TÄSSÄ
		}

		if(i >= titleListLength){
			//chart.Series[i - 1].Visible = false;
			axisList[i].Visible = false;
		}

		if(i == 3){
			axisList[i].OtherSide = false;
			axisList[i].RelativePosition = relativePositionAxes3;

		}
		if(i == 4){
			axisList[i].OtherSide = true;
			axisList[i].RelativePosition = relativePositionAxes4;
		}
		if(i == 5){
			axisList[i].OtherSide = false;
			axisList[i].RelativePosition = relativePositionAxes5;
		}
		if(i == 6){
			axisList[i].OtherSide = true;
			axisList[i].RelativePosition = relativePositionAxes6;
		}
		if(axisBuffer == true && axisList[i].OtherSide == axisBufferOtherSide){
			axisList[i].RelativePosition = axisList[i].RelativePosition - 2;
			if(i == 3){
				relativePositionAxes5 = relativePositionAxes5 - 2;
			}
			else if(i == 4){
				relativePositionAxes6 = relativePositionAxes6 - 2;
			}
			axisBuffer = false;
		}

		if(i != 0){
			if(scaleMode == "Kovaskaalaus"){
				axisList[i].Automatic = false;
				axisList[i].AutomaticMaximum = false;
				axisList[i].AutomaticMinimum = false;

				axisList[i].Maximum = limits[i - 1][0];
				if(axisList[i].Maximum.ToString().Length > 3){
					axisBuffer = true;
					axisBufferOtherSide = axisList[i].OtherSide;
				}
				
				axisList[i].Minimum = limits[i - 1][1];
				axisList[i].Increment = limits[i - 1][2];
			}


			
			
			axisList[i].Title.Angle = angleList[i - 1];
			axisList[i].Title.Font.Size = titleFontSize;
			axisList[i].Labels.Font.Size = labelFontSize;
			axisList[i].Title.Font.Color = serieColors[i - 1];
			axisList[i].Labels.Font.Color = serieColors[i - 1];
		}
		


	}
	

	double span = DateTime.Parse(endTime).Subtract(DateTime.Parse(startTime)).TotalHours;

	if(span > 24 * 5){
		chart.Axes.Bottom.Labels.DateTimeFormat = "dd.MM.yyyy";
	}
	else if(span <= 24 * 5 && span > 24){
		chart.Axes.Bottom.Labels.DateTimeFormat = "dd.MM.yyyy HH:mm";
	}
	else{
		chart.Axes.Bottom.Labels.DateTimeFormat = "HH:mm ddd";
	}

	

	int seriesCount = chart.Series.Count;
	
	
	
	for (int j = 0; j < seriesCount; j++){

		if(j == 0){
			chart.Series[j].VertAxis = Steema.TeeChart.Styles.VerticalAxis.Left;
		}
		if(j == 1){
			chart.Series[j].VertAxis = Steema.TeeChart.Styles.VerticalAxis.Right;
		}
		else{
			chart.Series[j].VertAxis = Steema.TeeChart.Styles.VerticalAxis.Custom;

		}
		chart.Series[j].HorizAxis = Steema.TeeChart.Styles.HorizontalAxis.Bottom;

	}

}

public void formatSeries(Steema.TeeChart.TChart chart, System.Data.DataSet ds, string[] formatList, List<Steema.TeeChart.Axis> axisList, int graphNo){
	

	
	int actualCount = 0;
	int avgCount = 0;
	int formatListLength = formatList.Length;
	for (int i = 0; i < formatListLength; i++){
		if(formatList[i] == "points"){
			
			Steema.TeeChart.Styles.Points points = new Steema.TeeChart.Styles.Points();
			
			int actualTablesCount = 0;
			for(int tableNo = 0; tableNo < ds.Tables.Count; tableNo++){
				if(ds.Tables[tableNo].TableName.StartsWith("actual"))actualTablesCount++;
			}

			points.DataSource = ds.Tables["actual"+graphNo.ToString()+"_"+actualCount.ToString()];
			points.XValues.DataMember = "ts";
			points.XValues.DateTime = true;
			points.YValues.DataMember = "value" + actualCount.ToString();
			points.CheckDataSource();
			points.Color = serieColors[i];
			
			if(i == 2){

				points.CustomVertAxis = axisList[i+1];
				
			}
			if(i == 3){
				points.CustomVertAxis = axisList[i+1];
			}
			if(i == 4){
				points.CustomVertAxis = axisList[i+1];
			}
			if(i == 5){
				points.CustomVertAxis = axisList[i+1];
			}
			actualCount++;
			chart.Series.Add(points);
		}
		else if(formatList[i] == "line"){
		
			Steema.TeeChart.Styles.Line line = new Steema.TeeChart.Styles.Line();
			line.DataSource = ds.Tables["avg"+graphNo.ToString()];
			line.LinePen.Width = lineWidth;
			//line.LinePen.Style = DashStyle.Dash;
			line.XValues.DataMember = "ts";
			line.XValues.DateTime = true;
			line.YValues.DataMember = "value" + avgCount.ToString();
			line.CheckDataSource();
			line.Color = serieColors[i];
			if(i == 0){

				//line.VertAxis = Steema.TeeChart.Styles.VerticalAxis.Left;
				
			}
			if(i == 1){

				//line.VertAxis = Steema.TeeChart.Styles.VerticalAxis.Right;
				
			}
			if(i == 2){

				line.CustomVertAxis = axisList[i+1];
				
			}
			if(i == 3){
				line.CustomVertAxis = axisList[i+1];
			}
			if(i == 4){
				line.CustomVertAxis = axisList[i+1];
			}
			if(i == 5){
				line.CustomVertAxis = axisList[i+1];
			}
			avgCount++;
			
			chart.Series.Add(line);
		}
		else if(formatList[i] == "bar"){
		
			Steema.TeeChart.Styles.Bar bar = new Steema.TeeChart.Styles.Bar();
			bar.DataSource =  ds.Tables["avg"+graphNo.ToString()];
			//line.LinePen.Width = lineWidth;
			bar.XValues.DataMember = "ts";
			bar.XValues.DateTime = true;
			bar.YValues.DataMember = "value" + i.ToString();
			bar.CheckDataSource();
			bar.Color = serieColors[i];
			bar.MultiBar = Steema.TeeChart.Styles.MultiBars.Side; //Stacked, Stacked100, SelfStack, SideAll
			bar.Marks.Visible = false;
			bar.BarWidthPercent = 30;

			bar.CustomVertAxis = axisList[i+1];

			
			chart.Series.Add(bar);
		}
	}


}

public System.Data.DataSet getDataSets(string[] tagStringList, string currentTS, string[][] tagLists, string startTime, string endTime, string defaultPeriod, string[][] timeSteps){

	List<string> tagList = new List<string>();
	List<string> opList = new List<string>();

	foreach (string s in tagStringList) {
		tagList.Add(s.Split(';')[0]);
		opList.Add(s.Split(';')[1]);
	
	}

	Metso.DNA.IA.DNAdata.Interfaces.IDNAdataObject dobj = 
		(Metso.DNA.IA.DNAdata.Interfaces.IDNAdataObject) Metso.DNA.IA.DNAdata.RemoteUtils.CreateRemote("DNAdataObject");
	
	
	DateTime st = DateTime.Parse(startTime);
	DateTime et = DateTime.Parse(endTime);
	
	string period ="";
	if(currentTS==""){
		period = defaultPeriod;
	}else if(currentTS==timeSteps[1][1]){
		period = "01:00:00";
	}else if(currentTS==timeSteps[2][1]){
		period = "1.00:00:00";
	}
	else{
		throw new Exception("Bad timestep ("+currentTS+"). Must be -1H or -1D ");
	}
	
	string[] periodList = new string[1]{period};
	string[] optionsList = new string[1];
	optionsList[0] = "TS_START";


	System.Data.DataSet dataQuery = (System.Data.DataSet) (dobj.InvokeMethod("Combination", "localhost" + "/Query.BasicQueries.Extended", null, st, et, periodList, optionsList, tagList.ToArray(), opList.ToArray(), new string[]{"(null)"}, new string[]{"(null)"}, new string[]{"(null)"}, new string[]{"(null)"}, new string[]{"(null)"}));
	
	
	System.Data.DataSet tagInfoQuery = (System.Data.DataSet) (dobj.InvokeMethod("TagInformation_List", "localhost" + "/Query.BasicQueries.Information", null, tagList.ToArray(), "(null)"));
	if(dataQuery.Tables.Count == 0)
	{
		throw new Exception("No data");
	}

	DataSet ds_new = reorganizeData(dataQuery, tagInfoQuery, tagLists, currentTS);
	//throw new Exception(ds_new.Tables["info0"].Rows[0]["TagName"].ToString()+ds_new.Tables["info0"].Rows[1]["TagName"].ToString()+ds_new.Tables["info0"].Rows[2]["TagName"].ToString()+ds_new.Tables["info0"].Rows[3]["TagName"].ToString());
	return ds_new;
}
public List<Steema.TeeChart.Axis> createCustomAxes(Steema.TeeChart.TChart chart, int length){


		
	Steema.TeeChart.Axis Custom0 = new Steema.TeeChart.Axis(chart.Chart);
	Steema.TeeChart.Axis Custom1 = new Steema.TeeChart.Axis(chart.Chart);
	
	Custom0.AxisPen.Visible = true;
	Custom0.Grid.Visible = false;
	
	Custom1.AxisPen.Visible = true;
	Custom1.Grid.Visible = false;
	
	chart.Axes.Left.Grid.Visible = true;
	chart.Axes.Right.Grid.Visible = false;
	
	chart.Axes.Custom.Add(Custom0);
	chart.Axes.Custom.Add(Custom1);

	Steema.TeeChart.Axis[] axisArr = new Steema.TeeChart.Axis[5]{
		chart.Axes.Bottom,
		chart.Axes.Left,
		chart.Axes.Right,
		chart.Axes.Custom[0],
		chart.Axes.Custom[1]};

	List<Steema.TeeChart.Axis> axisList = new List<Steema.TeeChart.Axis>(axisArr);

	
	if(length > 4){
		Steema.TeeChart.Axis Custom2 = new Steema.TeeChart.Axis(chart.Chart);
		Custom2.AxisPen.Visible = true;
		Custom2.Grid.Visible = false;
		chart.Axes.Custom.Add(Custom2);
		axisList.Add(Custom2);
	}
	if(length == 6){
		Steema.TeeChart.Axis Custom3 = new Steema.TeeChart.Axis(chart.Chart);
		Custom3.AxisPen.Visible = true;
		Custom3.Grid.Visible = false;
		chart.Axes.Custom.Add(Custom3);
		axisList.Add(Custom3);
	}

	return axisList;

}

public void setReportConfigs(System.Data.DataSet ds){
	// Custom printer settings: fixes broken charts that are in page break position
	rpt.Document.Printer.PrinterName = "";
	rpt.PageSettings.PaperKind = System.Drawing.Printing.PaperKind.Custom;
	// Config -> 35000 so graphs place evenly (one tall paper), might break printing somehow
	rpt.Document.Printer.PaperSize = new System.Drawing.Printing.PaperSize("CustomSize", 1000, 5000);
	rpt.PrintWidth = reportWidth;
	
	
	rpt.DataSource = ds;
	rpt.DataMember = "avg0";
	rpt.UserData = "";
}

public void buildLegend(System.Data.DataSet tagInfo, int j){

	string[] texts = new string[3]{"Description", "TagName", "Unit"};
	string[] textsFin = new string[3]{"Kuvaus", "Positio", "Yksikkö"};
	float[] widths = new float[3]{3.0f, 3.0f, 3.0f};
	float colHeight = 0.2f;
	float linePositionTop = 0.0f;
	
	
	for (int column = 0; column < texts.Length; column++){
	

		for(int row = 0; row < tagInfo.Tables["info"+j.ToString()].Rows.Count; row++){
			if(row == 0){
				TextBox boxColumnHeader = new TextBox();
				string textColumnHeader = textsFin[column];
				if(textColumnHeader == "" && column == 0)textColumnHeader = "This is a testing description";
				if(textColumnHeader == "" && column == 2)textColumnHeader = "kg/nm3";
				boxColumnHeader.Height = colHeight;
				boxColumnHeader.Top = yStart + (j + 1) * (graphHeight) + j * spacer + (row * colHeight) - 0.02f;
				boxColumnHeader.Left = graphWidth / 8 + (column * ( graphWidth / 4));
				boxColumnHeader.Text = textColumnHeader;
				boxColumnHeader.Style = "font-size: 11pt";
				boxColumnHeader.ForeColor = serieColors[2];
				boxColumnHeader.Width = widths[column];
				rpt.Sections["ReportHeader1"].Controls.Add(boxColumnHeader);
			}
			TextBox box = new TextBox();
			string text = tagInfo.Tables["info"+j.ToString()].Rows[row][texts[column]].ToString();
			if(text == "" && column == 0)text = "This is a testing description";
			if(text == "" && column == 2)text = "kg/nm3";
			box.Height = colHeight;
			box.Top = yStart + (j + 1) * (graphHeight) + j * spacer + (row * colHeight) + colHeight;
			linePositionTop = box.Top + colHeight + 0.5f;
			box.Left = graphWidth / 8 + (column * ( graphWidth / 4));
			box.Text = text;
			box.ForeColor = serieColors[row];
			box.Width = widths[column];
			rpt.Sections["ReportHeader1"].Controls.Add(box);
		}
		

	}
	Line separatorLine = new Line();
	separatorLine.Top = linePositionTop;
	separatorLine.X2 = 15.0f;
	rpt.Sections["ReportHeader1"].Controls.Add(separatorLine);

}


public void SetHeaders()
{
    TextBox headerBox = new TextBox();
	headerBox.Text = header;
	headerBox.Left = 0.3f;
	headerBox.Width = reportWidth - 1.2f;
	headerBox.Height = 0.35f;
	headerBox.Style = "color: #00005A; font-size: 20pt; font-weight: bold; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
	rpt.Sections["ReportHeader1"].Controls.Add(headerBox);
	
	TextBox headerBox2 = new TextBox();
	headerBox2.Text = header2;
	headerBox2.Top = headerBox.Height;
	headerBox2.Left = 0.2f;
	headerBox2.Width = reportWidth - 1.0f;
	headerBox2.Height = 0.35f;
	headerBox2.Style = "color: #00005A; font-size: 16pt; font-weight: bold; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
	rpt.Sections["ReportHeader1"].Controls.Add(headerBox2);
	
	Shape headerRect = new Shape();
	headerRect.Top = 0.4f + headerBox.Height + headerBox2.Height;
	headerRect.Left = 0.7f;
	headerRect.Width = reportWidth - 2.2f;
	headerRect.Height = 0.25f;
	headerRect.BackColor = System.Drawing.Color.FromArgb(0, 0, 90);
	rpt.Sections["ReportHeader1"].Controls.Add(headerRect);
}

public void SetTimeStepMenu(string[][] timeSteps, string reportPath, string currentTS, string reportPathTemplate, string timeSpanMode, string scaleMode){


	float boxWidth = 1.05f;
	float boxHeight = 0.2f;
	float boxTop = 0.2f;
	float timeStepBarLength = timeSteps.Length * boxWidth;
	float boxLeft = (reportWidth / 10) - 1.0f;

	for(int tsNo = 0; tsNo < timeSteps.Length; tsNo++){
		if(tsNo == 0){
			TextBox headerBox = new TextBox();
			headerBox.Text = "Aikataso";
			headerBox.Style = "color: #00005A; font-size: 11pt; font-weight: italic; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
			headerBox.Left = boxLeft;
			headerBox.Top = boxTop - boxHeight;
			headerBox.Width = boxWidth;
			headerBox.Height = boxHeight;
			headerBox.BackColor = System.Drawing.Color.White;
			//rpt.Sections["ReportHeader1"].Controls.Add(headerBox);
		}
		TextBox box = new TextBox();
		box.Text = timeSteps[tsNo][0];
		box.Style = "color: #00005A; font-size: 11pt; font-weight: italic; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
		box.Left = boxLeft;
		box.Top = boxTop+ tsNo * boxHeight;
		box.Width = boxWidth;
		box.Height = boxHeight;
		box.BackColor = System.Drawing.Color.White;
		string timeStepReportPath = reportPath + timeSteps[tsNo][1];
		timeStepReportPath = timeStepReportPath.Replace("[SPANMODE]", timeSpanMode);
		timeStepReportPath = timeStepReportPath.Replace("[SCALEMODE]", scaleMode);
		box.HyperLink = timeStepReportPath;
		
		if(currentTS == timeSteps[tsNo][1]){
			box.Style = "color: #00005A; font-size: 11pt; font-weight: bold; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1;text-decoration: underline";
		}
		rpt.Sections["ReportHeader1"].Controls.Add(box);
	}
	
	float spanBoxWidth = boxWidth;
	float spanBoxHeight = boxHeight;
	float spanBoxTop = boxTop;
	//float spanBoxLength = timeSteps.Length * boxWidth;
	float spanBoxLeft = boxLeft + spanBoxWidth;
	

	string[] timeSpans = new string[]{"Päivä", "Viikko", "Kuukausi", "Vuosi"};
	string dt1 = DateTime.Now.AddDays(-1).ToString();
	string dt2 = DateTime.Now.AddDays(-7).ToString();
	string dt3 = DateTime.Now.AddMonths(-1).ToString();
	string dt4 = DateTime.Now.AddYears(-1).ToString();
	var cult = System.Globalization.CultureInfo.CurrentCulture.ToString();
	dt1 = DateTime.Parse(dt1, new System.Globalization.CultureInfo(cult, false)).ToString();
	dt2 = DateTime.Parse(dt2, new System.Globalization.CultureInfo(cult, false)).ToString();
	dt3 = DateTime.Parse(dt3, new System.Globalization.CultureInfo(cult, false)).ToString();
	dt4 = DateTime.Parse(dt4, new System.Globalization.CultureInfo(cult, false)).ToString();
	string currentTime = DateTime.Parse(DateTime.Now.ToString(), new System.Globalization.CultureInfo(cult, false)).ToString();

	string[] startTimes = new string[]{dt1, dt2, dt3, dt4};
	for(int spanNo = 0; spanNo < timeSpans.Length; spanNo++){

		TextBox spanBox = new TextBox();
		spanBox.Text = timeSpans[spanNo];
		spanBox.Style = "color: #00005A; font-size: 11pt; font-weight: italic; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
		spanBox.Left = spanBoxLeft;
		spanBox.Top = spanBoxTop + spanNo * spanBoxHeight;
		spanBox.Width = boxWidth;
		spanBox.Height = boxHeight;
		spanBox.BackColor = System.Drawing.Color.White;
		string spanReportPath = reportPathTemplate + currentTS;
		spanReportPath = spanReportPath.Replace(  "[STARTTIME]", startTimes[spanNo]  );
		spanReportPath = spanReportPath.Replace("[ENDTIME]",currentTime);
		spanReportPath = spanReportPath.Replace("[SPANMODE]", timeSpans[spanNo].Replace('ä','a'));
		spanReportPath = spanReportPath.Replace("[SCALEMODE]", scaleMode);
		spanBox.HyperLink = spanReportPath;

		
		if(timeSpanMode == timeSpans[spanNo].Replace('ä','a')){

			spanBox.Style = "color: #00005A; font-size: 11pt; font-weight: bold; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1;text-decoration: underline";

		}
		rpt.Sections["ReportHeader1"].Controls.Add(spanBox);
	}
	
	string[] scaleConfigs = new string[]{"Kovaskaalaus", "Autoskaalaus"};
	float scaleConfigBoxLeft = boxLeft + spanBoxWidth * 2;
	float scaleConfigBoxHeight = boxHeight;
	for(int scaleConfigNo = 0; scaleConfigNo < scaleConfigs.Length; scaleConfigNo++){
		TextBox scaleConfigBox = new TextBox();
		scaleConfigBox.Text = scaleConfigs[scaleConfigNo];
		scaleConfigBox.Style = "color: #00005A; font-size: 11pt; font-weight: italic; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
		scaleConfigBox.Left = scaleConfigBoxLeft;
		scaleConfigBox.Top = boxTop + scaleConfigNo * boxHeight;
		scaleConfigBox.Width = boxWidth;
		scaleConfigBox.Height = boxHeight;
		scaleConfigBox.BackColor = System.Drawing.Color.White;
		string scaleConfigReportPath = reportPath + currentTS;
		scaleConfigReportPath = scaleConfigReportPath.Replace("[SPANMODE]", timeSpanMode);
		scaleConfigReportPath = scaleConfigReportPath.Replace("[SCALEMODE]", scaleConfigs[scaleConfigNo]);
		scaleConfigBox.HyperLink = scaleConfigReportPath;
		if(scaleMode == scaleConfigs[scaleConfigNo]){

			scaleConfigBox.Style = "color: #00005A; font-size: 11pt; font-weight: bold; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1;text-decoration: underline";

		}
		rpt.Sections["ReportHeader1"].Controls.Add(scaleConfigBox);
	}
	

}

public DataSet reorganizeData(DataSet ds, DataSet dsInfo, string[][] tagLists, string currentTS)
        {

            DataSet ds_new = new DataSet();


            for (int graphNo = 0; graphNo < tagLists.Length; graphNo++)
            {
                List<string> tableNames = new List<string>();
                tableNames.Add("avg" + graphNo.ToString());
                string[] graphTags = tagLists[graphNo];

                int actualCount = 0;
                List<int> avgColIndexes = new List<int>();

                List<int> actualColIndexes = new List<int>();

                DataTable dtInfo = dsInfo.Tables[0].Copy();

                dtInfo.TableName = "info" + graphNo.ToString();
                List<string> tags = new List<string>();
                foreach (string s in graphTags)
                {
                    tags.Add(s.Split(';')[0]);
                }
                DataTable tableTemp = dtInfo.Clone();
                for (int row = 0; row < dtInfo.Rows.Count; row++)
                {
                    string tag = dtInfo.Rows[row]["TagName"].ToString();
                    if (tags.Contains(tag))
                    {
                        tags.Remove(tag);
						
                        tableTemp.ImportRow(dtInfo.Rows[row]);
                        if (tags.Count == 0) break;

                    }


                }
                ds_new.Tables.Add(tableTemp);

                int colIndex = 0;



                foreach (string tag in graphTags)
                {
                    //dtInfo.ImportRow(dsInfo.Tables[0].Rows[colIndex]);
                    if (tag.Split(';')[1] == "avg") avgColIndexes.Add(colIndex);
                    if (tag.Split(';')[1] == "actual") { actualCount++; actualColIndexes.Add(colIndex); tableNames.Add("actual" + graphNo + "_" + actualCount); };
                    colIndex++;
                }
                //ds_new.Tables.Add(dtInfo);
                if (avgColIndexes.Count == 0) tableNames.RemoveAt(0);
                foreach (string name in tableNames)
                {
                    List<string> indexList = new List<string>();
                    if (name.StartsWith("av"))
                    {

                        indexList.Add("ts");
                        foreach (int index in avgColIndexes)
                        {
                            indexList.Add("value" + index);
                        }
                    }
                    if (name.StartsWith("ac"))
                    {

                        indexList.Add("ts");
                        foreach (int index in actualColIndexes)
                        {
                            indexList.Add("value" + index);
                        }
                    }
                    List<string> newColNames = new List<string>();
                    newColNames.Add("ts");
                    for (int j = 0; j < indexList.Count - 1; j++)
                    {
                        newColNames.Add("value" + j.ToString());

                    }
                    DataTable newDt = reorganizeTable(ds.Tables[0], name, indexList, newColNames);
                    ds_new.Tables.Add(newDt);


                }


            }
            return ds_new;
        }

public DataTable reorganizeTable(DataTable dt, string newTableName, List<string> columnNames, List<string> columnNamesNew)
{ 
	DataTable dt_new = dt.Copy();
	dt_new.TableName = newTableName;
	for (int i = 0 ; i < dt_new.Columns.Count; i++){
		DataColumn dc = dt_new.Columns[i];
		if(!(columnNames.Contains(dc.ColumnName))){
			dt_new.Columns.Remove(dc);
			i--;
		}
	}
	int j = 0;
	foreach (string name in columnNamesNew){

		dt_new.Columns[j].ColumnName = name;
		j++;
	}

	DataView dv = new DataView(dt_new);
	string colName = dt_new.Columns[1].ColumnName;
	dv.RowFilter = colName + " Is Not Null";
	dt_new = dv.ToTable();

	return dt_new;
}

public string[] mergeDistictArrays(string[][] arr)
{

	List<string> comb = new List<string>();

	foreach (string[] a in arr)
	{
		comb.AddRange(a);
	}



	Dictionary<string, int> uniqueStore = new Dictionary<string, int>();
	List<string> finalList = new List<string>();
	foreach (string currValue in comb)
	{
		if (!uniqueStore.ContainsKey(currValue))
		{
			uniqueStore.Add(currValue, 0);
			finalList.Add(currValue);
		}
	}
	return finalList.ToArray();
}


public static int GetMonthDifference(DateTime startDate, DateTime endDate)
{
	int monthsApart = 12 * (startDate.Year - endDate.Year) + startDate.Month - endDate.Month;
	return monthsApart;
}

public void setHistoryIndication()
{
	TextBox historyBox = new TextBox();
	historyBox.Text = "Selaat historiaa";
	historyBox.Left = 0.8f;
	historyBox.Top = 1.5f;
	historyBox.Width = 1.2f;
	historyBox.Height = 0.35f;
	historyBox.Style = "color: #F10606; font-size: 11pt; font-weight: italic; text-align: center; vertical-align: middle; white-space: nowrap; ddo-char-set: 1";
	rpt.Sections["ReportHeader1"].Controls.Add(historyBox);
}



]]></Script>
  <PageSettings />
  <Parameters />
</ActiveReportsLayout>